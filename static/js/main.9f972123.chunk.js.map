{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handlleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAuDeA,MArDf,SAAkBC,GACd,MAAsBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAO,IAA9D,mBAAMC,EAAN,KAAYC,EAAZ,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAgB,SAAAC,GAClBP,EAASO,EAAEC,OAAOV,QAatB,OACI,sBAAMW,UAAU,YAAYC,SAXX,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAGC,KAAKC,MAAoB,IAAdD,KAAKE,UACnBC,KAAMjB,IAEVC,EAAS,KAIT,SACKL,EAAME,KAAS,qCACA,uBAAOoB,KAAO,OACdC,YAAY,cACZpB,MAASC,EACToB,KAAO,OACPV,UAAU,aACVW,SAAUd,EACVe,IAAOpB,IAEvB,wBAAQQ,UAAU,mBAAlB,uBAEC,qCACD,uBAAOQ,KAAO,OACNC,YAAY,aACZpB,MAASC,EACToB,KAAO,OACPV,UAAU,aACVW,SAAUd,EACVe,IAAOpB,IAEhB,wBAAQQ,UAAU,cAAlB,4B,eCJIa,EAtCF,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAMC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAC3C,EAAuB9B,mBAAS,CAC5BgB,GAAG,KACHd,MAAM,KAFV,mBAAOD,EAAP,KAAY8B,EAAZ,KAYA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SARZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAG,KACHd,MAAM,QAQPyB,EAAMK,KAAI,SAACC,EAAKC,GAAN,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAClC,WADA,UAEI,qBAAmBC,QAAS,kBAAIR,EAAaK,EAAKjB,KAAlD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACAuB,QAAS,kBAAKP,EAAWI,EAAKjB,KAC9BH,UAAU,gBAEV,cAAC,IAAD,CACAuB,QAAS,kBAAKL,EAAQ,CAACf,GAAGiB,EAAKjB,GAAId,MAAM+B,EAAKb,QAC9CP,UAAU,mBAXDqB,OCuBVG,MA5Cf,WACI,MAAsBrC,mBAAS,IAA/B,mBAAM2B,EAAN,KAAYW,EAAZ,KAgCA,OACI,gCACI,2DACA,cAAC,EAAD,CAAUxB,SAjCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAGA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAYN,IAC1BW,EAASE,OA6BL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdP,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAKA,IACTiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO2CZ,WAnBrC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAKA,KACtDsB,EAASI,IAiBmEZ,WA1B7D,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG1CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAAQC,EAAWE,eCN5DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCHNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f972123.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const[input,setInput]=useState(props.edit ? props.edit.value: '');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(()=>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handlleChange = e =>{\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id:Math.floor(Math.random()*10000),\r\n            text: input\r\n        })\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? ( <>\r\n                            <input type = 'text' \r\n                            placeholder='Update todo'\r\n                            value = {input}\r\n                            name = 'text'\r\n                            className='todo-input'\r\n                            onChange={handlleChange}\r\n                            ref = {inputRef}\r\n                            />\r\n            <button className='todo-button edit'>Update</button></>)\r\n             :\r\n             <>\r\n            <input type = 'text' \r\n                    placeholder='Add a todo'\r\n                    value = {input}\r\n                    name = 'text'\r\n                    className='todo-input'\r\n                    onChange={handlleChange}\r\n                    ref = {inputRef}\r\n                    />\r\n           <button className='todo-button'>Add todo</button></>\r\n        }\r\n            \r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React,{ useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({todos,completeTodo, removeTodo, updateTodo}) => {\r\n    const [edit,setEdit] = useState({\r\n        id:null,\r\n        value:''\r\n    });\r\n\r\n    const submitUpdate = value =>{\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id:null,\r\n            value:''\r\n        });\r\n    };\r\n    if (edit.id){\r\n        return <TodoForm edit={edit} onSubmit = {submitUpdate}/>;\r\n    }\r\n\r\n\r\n    return todos.map((todo,index)=>(\r\n        <div className={todo.isComplete ? 'todo-row complete':\r\n        'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={()=>completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine \r\n                onClick={()=> removeTodo(todo.id)}\r\n                className='delete-icon'\r\n                />\r\n                <TiEdit \r\n                onClick={()=> setEdit({id:todo.id, value:todo.text})}\r\n                className='edit-icon'\r\n                />\r\n            </div>\r\n        </div>\r\n    ));\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n    const[todos,setTodos]=useState([]);\r\n\r\n    const addTodo = todo =>{\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n           return \r\n        }\r\n        const newTodos = [todo,...todos]\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue)=>{\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return \r\n         }\r\n         setTodos(prev => prev.map(item => (item.id === todoId? newValue : item)))\r\n    }\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo => todo.id!==id)\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id =>{\r\n        let updatedTodos  =todos.map(todo =>{\r\n            if(todo.id===id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Whats the plan for today?</h1>\r\n            <TodoForm onSubmit = {addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}>    \r\n            </Todo>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\nimport './App.css';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}